RLINK SPECIFICATION DOCUMENT

RLINK is a linker for 6809 assembly language modules in Relocatable Object Format, a format which was designed by Microware.

RLINK is broken into two main parts: Pass 1 and Pass 2.

int pass1() :
1. Initialize FILE, global symbol and external reference lists to nil.
2. For each ROF file passed on the command line:
    A. Allocate structure containing binhead and FILE *
    

So everytime a .r is read we need to record some basic information:
struct{
    struct *next_pointer;
    FILE *filepointer;
    int offset; /* always zero for .r files, used for .l files */
    struct binhead binary_header;
};

    
        1a. Open file with fopen, saving FILE * into newly allocated structure.
        1b. Read in binhead into structure
        1c. open the ROF and verify ROF header magic number.
        1d. for first ROF, verify type/lang and attr/rev are not zero, and verify that subsequent ROFs have a type/lang and attr/rev of zero, erroring out if not the case at any point.
    B. Add all global symbols and external references from the ROF into the respective tables.
        1a. Global Symbol: Name, Offset, flag and FILE * linked list
            i. Symbols found immediately after ROF Header
            ii. First big endian word (two bytes) is total number of symbols.
            iii. Each entry begins with a null terminated name string (name).
            iv. Then a flag byte.
            v. Then a two byte (big endian) offset.
            vi. Error on duplicate symbols.
        1b. Seek past Code and initialized data: hd.h_ocode + hd.h_ddata + hd.h_data bytes
        1c. External Reference: name, reference position, flag, and FILE * linked list
            i. First big endian word (two bytes) is total number of symbols.
            ii. Each entry begins with a null terminated string (name).
            iii. Then a word sized (two bytes, big endian) count of references.
                1. Each reference contains one byte of flags and two byte offset.
        1d. The first ROF has some additional symbols added to it by the linker:
            i. dpsize (udpd)
            ii. end (udat) - initialized to one byte higher than the initialized data.
            iii. edata (idat) - initialized to one byte higher than the uninitialized data.
            iv. btext (code) - (always zero?)
            v. etext (code) - End of the code section?
    C. Check each undefined symbol for an entry in the global symbols table.
        1a. If there are still undefined symbols, load a library file
            i. Error on duplicate symbols.
        1b. Check again for undefined symbols.
        1c. Do 1a again.
        1d. If library file are exhusted, report unresolved references error.
 
 
 
int pass2() :
1. Open a path to a new file which will contain the OS-9 or DECB module.
2. OS-9: Write the module header; DECB: Write the DECB LOADM header
3. Visit each ROF file, writing the object code from the ROF into the new module file.
4. Revisit each ROF file, writing the initialized DP data to the new module file.
5. Revisit each ROF file, writing the initialized data to the new module file.
6. Write out Data-text reference offsets.
    Formula: Offset comes from the offset in the ROF plus the offset of the inserted psect.
             Bias comes from the offset of the inserted psect. Hmm. I guess I don't have a handle on this. :(
7. Write out Data-data reference offsets.
8. Write out program name.
9. OS-9: Write out the 3 byte CRC; DECB: Write the DECB LOADM trailer.


ROF File format:

                    +---------------------------------+
Header              | Magic value: 62CD2387           | 4 bytes
                    | Type/Language                   | 2 bytes
                    | Assembly Valid                  | 1 byte
                    | Date (OS9 format)               | 5 bytes
                    | Edition Number                  | 1 byte
                    | Unused                          | 1 byte
                    | Size of global storage (h_glbl) | 2 bytes
                    | Size of dp storage (h_dglbl)    | 2 bytes
                    | Size of initalized data         | 2 bytes
                    | Size of dp initialized data     | 2 bytes
                    | Size of object code             | 2 bytes
                    | Size of stack required          | 2 bytes
                    | Offset to entry point of code   | 2 bytes
                    +---------------------------------+
                    : Module name (null terminated)   : ? bytes
                    +---------------------------------+
Global Symbol Table v Count                           v 2 bytes
                    : +------------------------------+:
                    : : Name (null terminated)       :: ? bytes
                    : : Flag                         :: 1 Byte
                    : : Offset                       :: 2 bytes
                    : +------------------------------+:
                    : +------------------------------+:
                    : :                              ::
                    ^ :..............................:^
                    +---------------------------------+
object code         v                                 v h_ocode bytes
                    :                                 :
                    :                                 :
                    :                                 :
                    ^                                 ^
                    +---------------------------------+
Initialized data    v                                 v h_data bytes
                    :                                 :
                    :                                 :
                    :                                 :
                    ^                                 ^
                    +---------------------------------+
dp initialized data v                                 v h_ddata bytes
                    :                                 :
                    :                                 :
                    :                                 :
                    ^                                 ^
                    +---------------------------------+
External Ref Table  v Count                           v 2 bytes
                    : +------------------------------+:
                    : v Name (null terminated)       :: ? bytes
                    : : Count                        :: 2 Byte
                    : : +---------------------------+::
                    : : | Flag                      |:: 1 byte
                    : : | Offset                    |:: 2 bytes
                    : : +---------------------------+::
                    : : +---------------------------+::
                    : : :                           :::
                    : : :...........................:::
                    : +------------------------------+:
                    : :                              ::
                    ^ :..............................:^
                    +---------------------------------+
Local References    v Count                           v 2 bytes
                    : +------------------------------+:
                    : | Flag                         |: 1 byte
                    : | offset                       |: 2 Byte
                    : +------------------------------+:
                    : +------------------------------+:
                    : :                              ::
                    ^ :..............................:^
                    +---------------------------------+


Object Code Module file format (produced by rlink):

                    +---------------------------------+
Header              | Magic value: 0x87CD             | 2 bytes
                    | Module Size                     | 2 bytes
                    | Offset to module name           | 2 bytes
                    | Module type/Language            | 1 byte
                    | Attributes/Revision level       | 1 byte
                    | Header check                    | 1 byte
                    +---------------------------------+
                    | Execution offset                | 2 bytes
                    | Permanent Storage Size          | 2 bytes
                    : Module name (os9 string)        : ? bytes
                    | Edition                         | 1 bytes
                    +---------------------------------+
TEXT section        : +------------------------------+:
                    : : Executable code (ROF 1)      :: ? bytes
                    : : String Literals (ROF 1)      :: ? bytes
                    : +------------------------------+:
                    : . . . . . . . . . . . . . . . .::
                    : +------------------------------+:
                    : : Executable code (ROF n)      :: ? bytes
                    : : String Literals (ROF n)      :: ? bytes
                    : :..............................::
                    +---------------------------------+
DATA section (DP)   : Initialized DP Data count       : 2 bytes
                    : +------------------------------+:
                    : | Init DP Data (from mainline) |: ? bytes
                    : | Init DP Data (from ROF 1)    |: ? bytes
                    : | . . . . . . . . . . . . . . .|:
                    : | Init DP Data (from ROF n)    |: ? bytes
                    : +------------------------------+: IDpD bytes total
                    +---------------------------------+
DATA section        : Initialized Data count          : 2 bytes
                    : +------------------------------+:
                    : | Init Data (from mainline)    |: ? bytes
                    : | Init Data (from ROF 1)       |: ? bytes
                    : | . . . . . . . . . . . . . . .|:
                    : | Init Data (from ROF n)       |: ? bytes
                    : +------------------------------+: IDat bytes total
                    +---------------------------------+
                    : Data-text Reference count       : 2 bytes
                    : +------------------------------+:
                    : : Offset                       :: 2 bytes
                    : +------------------------------+:
                    : +------------------------------+:
                    : :..............................::
                    +---------------------------------+
                    : Data-data Reference count       : 2 bytes
                    : +------------------------------+:
                    : : Offset                       :: 2 bytes
                    : +------------------------------+:
                    : +------------------------------+:
                    : :..............................::
                    +---------------------------------+
                    : Program name (Null terminated)  : ? bytes
                    +---------------------------------+
                    | CRC check value                 | 3 bytes
                    +---------------------------------+



What the address space of the program looks like after it has been loaded and setup by root.a/cstart.a:

Start of Memory ===>     +---------------------------------+
                         : Initialized DP Data             : (IDpD bytes)
                         +---------------------------------+
                         : Uninitialized DP Data           : (UDpD bytes)
dpsiz (IDpD+UDpD) =>     +---------------------------------+
                         : Initialized Data                : (IDat bytes)
                         +---------------------------------+
                         : Unintialized Data               : (UDat bytes)
end (dpsiz+IDat+UDat) => +---------------------------------+
                         :                                 :
                         :                                 :
                         :                                 :
Stack Top is here =>     +---------------------------------+
                         :                                 :
                         :                                 :


                         . . . . . . . . . . . . . . . . . .
                         

                         :                                 :
                         :                                 :
Code Start        =>     +---------------------------------+
                         : Code                            :
                         :                                 :
                         :                                 :
                         :                                 :
Module End here   =>     +---------------------------------+


